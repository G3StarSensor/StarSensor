{"version":3,"sources":["helpers/alertNaveFantasma.js","helpers/alertNaveRebelde.js","helpers/alertSensorAveriado.js","helpers/viewLastMinuteData.js","helpers/btnLaunchRay.js","DashboardScreen.js","media/logo.jpg","shared/Header.js","index.js"],"names":["alarmNaveFantasma","detectada","color","size","className","style","border","borderRadius","alertNaveRebelde","condition","alertSensorAveriado","viewLastMinuteData","lastMinuteData","map","sensor","i","M","N","Text","styled","span","btnLaunchRay","active","DashboardScreen","useState","naveFantasma","naveRebelde","sensorAveriado","rand","Math","round","random","t","replace","console","log","id","Container","div","Clock","Logo","img","Header","dateTime","setDateTime","setInterval","today","Date","year","getFullYear","month","getMonth","day","getDay","hr","getHours","min","getMinutes","sec","getSeconds","getDateTime","src","logo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9241a1a.chunk.js","sourcesContent":["//Esta función pone el led de alarma en azul o rojo dependiendo de si hay algún peligro o no (true/false)\n\nimport { AiFillAlert } from \"react-icons/ai\";\n\n\nexport const alarmNaveFantasma = (detectada = false,dateTime) =>\n  detectada ? (\n    <>\n    <AiFillAlert\n      color=\"red\"\n      size=\"80px\"\n      className=\"animate__animated animate__pulse animate__infinite\"\n      style={{ border: \"2px solid red\", borderRadius: \"100%\" }}\n    />\n    <span className=\"danger\"> [(Bomber|1200)]</span>\n    </>\n  ) : (\n    <AiFillAlert\n      color=\"rgba(0, 38, 255, 0.842)\"\n      size=\"80px\"\n      style={{ border: \"2px solid blue\", borderRadius: \"100%\" }}\n    />\n  );","//alerta que se muestra cuando se detecta una nave rebelde\nexport const alertNaveRebelde = (condition = false) =>\n  condition ? (\n    <span className=\"alertDanger animate__animated animate__pulse animate__infinite\tinfinite\">\n      ¡Naves rebeldes detectadas!\n    </span>\n    \n  ) : (\n    <span className=\"alertOk\">No se han detectado naves rebeldes</span>\n  );\n","export const alertSensorAveriado = (condition = false) =>\n  condition ? (\n    <span className=\"alertDanger animate__animated animate__pulse animate__infinite\tinfinite\">\n      ¡Sensor [ 12375 ] defectuoso!\n    </span>\n  ) : (\n    <span className=\"alertOk\">No hay sensores averiados</span>\n  );\n","//Esta función muestra la data de los sensores obtenida en el último minuto\n\nexport const viewLastMinuteData = (lastMinuteData) => (\n    <table>\n      <thead></thead>\n      <tbody>\n      {lastMinuteData.map((sensor, i) => (\n        <tr key={i}>\n          {sensor.M < 100 ? (\n            <td>\n              S{i}: {sensor.N} | {sensor.M}\n            </td>\n          ) : (\n            <td className=\"danger\">\n              S{i}: {sensor.N} | {sensor.M}\n            </td>\n          )}\n        </tr>\n      ))}\n      </tbody>\n      <tfoot></tfoot>\n    </table>\n  );\n ","import { GiButtonFinger } from \"react-icons/gi\";\nimport styled from \"styled-components\";\n\nconst Text = styled.span`\n  font-family:arial;\n  font-size:1.8rem;\n  border-radius: 100%;\n  box-shadow: none;\n`\n\nexport const btnLaunchRay = (active = false) =>\nactive && (\n  <>\n    <button className=\"btnLaunchRay animate__animated animate__backInUp\">\n      <GiButtonFinger className=\"animate__animated animate__pulse animate__infinite infinite\"  />{\" \"}\n      <Text>\n        Lanzar Rayo \n      </Text>\n    </button>\n  </>\n);","import React, { useState } from \"react\";\nimport { alarmNaveFantasma } from \"./helpers/alertNaveFantasma\";\nimport { alertNaveRebelde } from \"./helpers/alertNaveRebelde\";\nimport { alertSensorAveriado } from \"./helpers/alertSensorAveriado\";\nimport { viewLastMinuteData } from \"./helpers/viewLastMinuteData\";\nimport { btnLaunchRay } from \"./helpers/btnLaunchRay\";\n\nexport default function DashboardScreen() {\n  //Variables de control para los sensores y los datos\n  const [naveFantasma, setNaveFantasma] = useState(false);\n  const [naveRebelde, setNaveRebelde] = useState(false);\n  const [sensorAveriado, setSensorAveriado] = useState(false);\n  const rand = () => Math.round(Math.random() * 120);\n  const [lastMinuteData, setLastMinuteData] = useState([\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n    { N: \"-\", M: rand() },\n  ]);\n\n  // const getData = async (url = '', data = {}) => {\n  //   const response = await fetch(url, {\n  //     method: 'GET', // *GET, POST, PUT, DELETE, etc.\n  //     mode: 'cors', // no-cors, *cors, same-origin\n  //     cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n  //     credentials: 'same-origin', // include, *same-origin, omit\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       'Token': '25a77d55-495a-4300-b72b-a61d90146786'\n  //       // 'Content-Type': 'application/x-www-form-urlencoded',\n  //     },\n  //     redirect: 'follow', // manual, *follow, error\n  //     referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n  //     body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  //   });\n  //   return response.json(); // parses JSON response into native JavaScript objects\n  // }\n\nconst t = \"2021-06-25 21:21:34,(-|81),(Gunship|1200),(-|48)\".replace(\"(\",\"{\")\n\nconsole.log([t]);\n  return (\n    <>\n      <div className=\"dash\">\n        {/* Se le debe pasar true si se detecta la nave fantasma */}\n        <div className=\"alarmNaveFantasma\">\n          {alarmNaveFantasma(naveFantasma)}\n        </div>\n\n        {/* Muestra la data recibida durante el último minuto*/}\n        <div className=\"last-minute-data\">\n          {viewLastMinuteData(lastMinuteData)}\n        </div>\n\n        <div className=\"alerts\">\n          {/* Se le debe pasar true si se confirma la presencia de alguna nave rebelde*/}\n          <div>{alertNaveRebelde(naveRebelde)}</div>\n\n          {/* Se le debe pasar true si se detecta una avería confirmada de un sensor*/}\n          <div>{alertSensorAveriado(sensorAveriado)}</div>\n        </div>\n        {naveFantasma && btnLaunchRay(true)}\n        <div id=\"chart_div\"></div>\n      </div>\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logo.8e7e9267.jpg\";","import React from \"react\";\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport logo from \"../media/logo.jpg\"\n\nconst Container = styled.div`\n  width: 100%;\n  height: 10vh;\n  background-color: rgb(31, 31, 31);\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding:0px 10%;\n  /* border-bottom: 2px solid rgb(90, 90, 90); */\n`;\n\nconst Clock = styled.div`\n  background-color: #333;\n  padding: 10px;\n  border-radius: 5px;\n  width: 180px;\n  text-align: center;\n`;\n\nconst Logo = styled.img`\n    display: inline-block;\n    height: 80%;\n    border-radius: 50px 50px 50px 50px;\n    padding: 0px;\n` \n\nexport default function Header() {\n  const [dateTime, setDateTime] = useState(\"00-00-00 00:00:00\");\n  const getDateTime = () => {\n    var today = new Date();\n    var year = today.getFullYear();\n    var month = today.getMonth();\n    var day = today.getDay();\n    var hr = today.getHours();\n    var min = today.getMinutes();\n    var sec = today.getSeconds();\n    return `${year}-${month}-${day} ${hr}:${min}:${sec}`;\n  };\n\n  const clock = () => setDateTime(getDateTime());\n\n  setInterval(clock, 1000);\n  return (\n    <Container className=\"animate__animated animate__shakeX\">\n        <Logo src={logo}/>\n      <Clock>{dateTime}</Clock>\n        <Logo src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6c/Star_Wars_Logo.svg/1200px-Star_Wars_Logo.svg.png\"/>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport DashboardScreen from \"./DashboardScreen\";\nimport \"./index.css\";\nimport Header from \"./shared/Header\";\n\nReactDOM.render(\n  <React.StrictMode className=\"\">\n    <Header />\n    <div className=\"viewer animate__animated animate__zoomInDown\">\n      <DashboardScreen />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}